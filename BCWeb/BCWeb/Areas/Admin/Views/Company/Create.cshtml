@model BCWeb.Areas.Admin.Models.Companies.CompanyProfileEditItem

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Foundation.cshtml";
}

<div class="row">
    <div class="large-6 columns">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>CompanyProfileEditItem</legend>

                <div class="editor-label">
                    @Html.LabelFor(model => model.CompanyName)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.CompanyName)
                    @Html.ValidationMessageFor(model => model.CompanyName)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Address1)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Address1)
                    @Html.ValidationMessageFor(model => model.Address1)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Address2)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Address2)
                    @Html.ValidationMessageFor(model => model.Address2)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.City)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.City)
                    @Html.ValidationMessageFor(model => model.City)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.PostalCode)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.PostalCode)
                    @Html.ValidationMessageFor(model => model.PostalCode)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.BusinessType)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.BusinessType,Model.BusinessTypes, "Select...", new { @class = "pretty" })
                    @Html.ValidationMessageFor(model => model.BusinessType)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.StateId)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.StateId, Model.States, "...", new { @class = "pretty" })
                    @Html.ValidationMessageFor(model => model.StateId)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Phone)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Phone)
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Published)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Published)
                    @Html.ValidationMessageFor(model => model.Published)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.OperatingDistance)
                </div>
                <div class="editor-field">
                    <select class="pretty" name="OperatingDistance">
                                    <option value="" @Model.OperatingDistance==0 ? @Html.Raw("selected"):@Html.Raw("")>select...</option>
                                    <option value="25" @Model.OperatingDistance==25 ? @Html.Raw("selected"):@Html.Raw("")>25 Miles</option>
                                    <option value="50" @Model.OperatingDistance==50 ? @Html.Raw("selected"):@Html.Raw("")>50 Miles</option>
                                    <option value="100" @Model.OperatingDistance==100 ? @Html.Raw("selected"):@Html.Raw("")>100 Miles</option>
                                    <option value="150" @Model.OperatingDistance==150 ? @Html.Raw("selected"):@Html.Raw("")>150 Miles</option>
                                    <option value="200" @Model.OperatingDistance==200 ? @Html.Raw("selected"):@Html.Raw("")>200 Miles</option>
                                    <option value="300" @Model.OperatingDistance==300 ? @Html.Raw("selected"):@Html.Raw("")>300 Miles</option>
                                    <option value="400" @Model.OperatingDistance==400 ? @Html.Raw("selected"):@Html.Raw("")>400 Miles</option>
                                    <option value="500" @Model.OperatingDistance==500 ? @Html.Raw("selected"):@Html.Raw("")>500 Miles</option>
                                    <option value="9000" @Model.OperatingDistance==9000 ? @Html.Raw("selected"):@Html.Raw("")>USA</option>

                                </select>
                    @Html.ValidationMessageFor(model => model.OperatingDistance)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Website)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Website)
                    @Html.ValidationMessageFor(model => model.Website)
                </div>

                <p>
                    <input type="submit" value="Create" />
                </p>
            </fieldset>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
