@model BCWeb.Models.Project.ViewModel.BPProjectDetailsViewModel
@{
    ViewBag.Title = "Project Details";
    Layout = "~/Views/Shared/_Foundation.cshtml";
}

<div ng-controller="BPDetailsCtrl">
    <div class="row">
        <div class="large-2 columns">
            <ul class="side-nav">
                @* limit to creator*@
                <li>@Html.RouteLink("Edit...", "Default", new { controller = "Project", action = "Edit", id = Model.ProjectId })</li>

                @{
                    if (User.IsInRole("general_contractor") || User.IsInRole("subcontractor"))
                    {
                    
                    <li>@Html.RouteLink("Create Bid Package", "Project_default", new { controller = "BidPackage", action = "Create", projectId = Model.ProjectId, templateId = Model.BidPackageId })</li>
                    <li>@Html.RouteLink("Manage Bid Packages", "Project_default", new { controller = "BidPackage", action = "Index", projectId = Model.ProjectId })</li>
                    <li>@Html.RouteLink("Compose Bid", "Project_default", new { controller = "Bid", action = "Compose", projectId = Model.ProjectId })</li>
                    }

                    if (User.IsInRole("architect"))
                    {
                    <li>@Html.RouteLink("Invite General Contractors", "Project_default", new { controller = "Invitation", action = "Send", id = Model.BidPackageId })</li>
                    <li>@Html.RouteLink("View Invited", "Project_default", new { controller = "Invitation", action = "ViewInvited", bpId = Model.BidPackageId })</li>
                    }
                }

            </ul>
        </div>
        <div class="large-8 columns left">
            <div class="row">
                <div class="large-4 columns">
                    <h3>@ViewBag.Title</h3>@Html.HiddenFor(m => m.ProjectId)@Html.HiddenFor(m => m.BidPackageId)
                </div>
                @if (User.IsInRole("general_contractor"))
                {
                    // if user is a GC and is invited
                    <div class="large-6 columns">
                        <div class="row">
                            <div class="large-12 columns" id="inviteResponseWrapper">
                                @* hide appropriate button depending on accept status*@
                                @if ((!Model.Accepted.HasValue || !Model.Accepted.Value) && (Model.InviteType.HasValue && Model.InviteType.Value == BCModel.Projects.InvitationType.SentFromCreatedBy))
                                {
                                    <input id="acceptBtn" type="button" value="Accept Invite" class="small success button" ng-click="accept()" />
                                }
                                @if (!Model.Accepted.HasValue || (Model.Accepted.Value && (Model.InviteType.HasValue && Model.InviteType.Value == BCModel.Projects.InvitationType.SentFromCreatedBy)))
                                {   
                                    <input id="declineBtn" type="button" value="Decline Invite" class="small alert button" ng-click="decline()" />
                                }
                                @if ((!Model.Accepted.HasValue && !Model.InviteType.HasValue) || (Model.Accepted.HasValue && !Model.Accepted.Value && Model.InviteType.HasValue && Model.InviteType.Value == BCModel.Projects.InvitationType.SelfInvite))
                                {
                                    <input id="joinBtn" type="button" value="Join Project" class="small success button" ng-click="join()" />
                                }
                                @if (Model.ResponseDate.HasValue && (Model.Accepted.HasValue && Model.Accepted.Value) && (Model.InviteType.HasValue && Model.InviteType.Value == BCModel.Projects.InvitationType.SelfInvite))
                                {
                                    <input id="leaveBtn" type="button" value="Leave Project" class="small alert button" ng-click="leave()" />
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="large-12 columns" id="inviteStatusWrapper">
                                @if (Model.Accepted.HasValue && Model.ResponseDate.HasValue)
                                {
                                    <span>@(Model.Accepted.Value ? "Accepted" : "Declined") on  @Model.ResponseDate.Value.ToShortDateString()</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="row">
                <div class="large-5 columns">
                    @Html.LabelFor(m => m.Title)
                    @Html.DisplayFor(m => m.Title)
                </div>
                <div class="large-4 columns">
                    @Html.LabelFor(m => m.Number)
                    @Html.DisplayFor(m => m.Number)
                </div>
                <div class="large-3 columns">
                    @Html.LabelFor(m => m.Architect)
                    @Html.DisplayFor(m => m.Architect)
                </div>
            </div>


            <div class="row">
                <div class="large-12 columns">
                    @Html.LabelFor(m => m.Description)
                    @Html.DisplayFor(m => m.Description)
                </div>
            </div>

            <div class="row">
                <div class="large-4 columns">
                    @Html.LabelFor(m => m.BidDateTime)
                    @Html.DisplayFor(m => m.BidDateTime)
                </div>

            </div>

            <div class="row">

                <div class="large-4 columns left">
                    @Html.LabelFor(m => m.ProjectType)
                    @Html.DisplayFor(m => m.ProjectType)
                </div>
                <div class="large-4 columns left">
                    @Html.LabelFor(m => m.ConstructionType)
                    @Html.DisplayFor(m => m.ConstructionType)
                </div>
                <div class="large-4 columns left">
                    @Html.LabelFor(m => m.BuildingType)
                    @Html.DisplayFor(m => m.BuildingType)
                </div>
            </div>
            <div class="row">
                <div class="large-7 columns">
                    <div class="row">
                        <div class="large-12 columns">
                            @Html.LabelFor(m => m.Address)
                            @Html.DisplayFor(m => m.Address)
                        </div>
                    </div>

                    <div class="row">
                        <div class="large-5 columns">
                            @Html.LabelFor(m => m.City)
                            @Html.DisplayFor(m => m.City)
                        </div>
                        <div class="large-3 columns">
                            @Html.LabelFor(m => m.State)
                            @Html.DisplayFor(m => m.State)
                        </div>
                        <div class="large-4 columns">
                            @Html.LabelFor(m => m.PostalCode)
                            @Html.DisplayFor(m => m.PostalCode)

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="large-12 columns">
                    @Html.LabelFor(m => m.SelectedScope)

                    <div class="section-container accordion" data-section="accordion">
                        @foreach (var s1 in Model.SelectedScope.Where(s => !s.parentId.HasValue))
                        {
                            <section>
                                <p class="title" data-section-title><a href="#">@s1.Description</a></p>
                                <div class="content" data-section-content>
                                    <ul>
                                        @foreach (var s2 in Model.SelectedScope.Where(s => s.parentId == s1.Id))
                                        {
                                            <li>@s2.Description
                                                <ul>
                                                    @foreach (var s3 in Model.SelectedScope.Where(s => s.parentId == s2.Id))
                                                    {
                                                        <li>@s3.Description</li>
                                                    }
                                                </ul>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </section>
                        }
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>
@Html.AntiForgeryToken()
@section scripts{
    @Scripts.Render("~/bundles/projectbpdetail")
}